# GitHub AI 코드 분석 챗봇 - 단위 프로젝트 PRD

## 프로젝트 개요
GitHub 저장소 URL과 선택적 토큰을 입력받아 코드를 분석하고 질문에 답변하며, 토큰이 있으면 코드 수정까지 가능한 미니멀 AI 챗봇

**핵심 가치**: RAG + LLM + GitHub API 조합으로 실무 AI 애플리케이션 경험

## 사용자 플로우

### 1. 메인 페이지 (`/`)
- GitHub 저장소 URL 입력 (필수)
- GitHub Personal Access Token 입력 (선택)
- "분석 시작" 버튼 클릭
- 분석 진행 상태 표시

### 2. 챗봇 페이지 (`/chat/{session_id}`)
- 분석 완료 후 자동 이동
- 저장소 정보 요약 표시
- 채팅 인터페이스로 Q&A
- 토큰이 있으면 코드 수정 기능도 활성화

## 핵심 기능 (MVP)

### 1. 저장소 분석
- GitHub API로 파일 목록 및 내용 읽기
- 주요 파일만 선별 (`.py`, `.js`, `.md`, `README` 등)
- 코드를 청크 단위로 분할
- OpenAI Embeddings로 벡터화
- 로컬 벡터 DB에 저장

### 2. 자연어 Q&A
- 사용자 질문을 임베딩으로 변환
- 유사도 검색으로 관련 코드 찾기
- 관련 코드와 질문을 LLM에게 전달
- 컨텍스트 기반 답변 생성

### 3. 코드 자동 수정 (토큰 있을 때)
- 사용자가 "이 버그 고쳐줘", "이 기능 추가해줘" 등 요청
- LLM이 코드 분석 후 수정된 전체 코드 생성
- 사용자 확인 후 승인하면 자동으로 커밋/푸시
- 새 브랜치 생성하여 안전하게 적용

## 기술 스택 (최소화)

### 백엔드
- **Python Flask** - 웹 서버
- **ChromaDB** - 로컬 벡터 DB (설치 간단)
- **requests** - GitHub API 호출
- **GitPython** - Git 작업

### AI/LLM
- **OpenAI API** - GPT-4o + text-embedding-3-small
- **LangChain** - 기본 RAG 체인만

### 프론트엔드
- **HTML + Vanilla JS** - 2개 페이지만
  - **메인 페이지**: GitHub URL + 토큰 입력
  - **챗봇 페이지**: 코드 분석 + Q&A + 수정 요청
- **Bootstrap** - 빠른 스타일링

## 환경 설정

### OpenAI API 키 설정
```bash
export OPENAI_API_KEY="your-openai-api-key"
```

### 사용 모델
- **LLM**: `gpt-4o` - 높은 품질의 코드 분석 및 생성
- **임베딩**: `text-embedding-3-small` - 비용 효율적이면서 성능 좋음
```
github-ai-bot/
├── app.py              # Flask 메인 서버
├── github_analyzer.py  # GitHub API + 임베딩 처리
├── chat_handler.py     # RAG + LLM 처리
├── git_modifier.py     # 코드 수정 + Git 작업
├── templates/
│   └── index.html      # 간단한 채팅 UI
├── static/
│   └── style.css       # 최소한의 CSS
└── requirements.txt    # 의존성
```

## 개발 단계 (3주 완성)

### 1주차: 기본 분석 시스템
- [ ] Flask 웹앱 셋업 (메인 페이지 + 챗봇 페이지)
- [ ] 메인 페이지 UI (URL + 토큰 입력 폼)
- [ ] GitHub API로 저장소 파일 읽기
- [ ] 코드 청크 분할 및 임베딩 생성
- [ ] ChromaDB 연동

### 2주차: Q&A 시스템
- [ ] 챗봇 페이지 UI 구성
- [ ] 분석 완료 후 페이지 이동 로직
- [ ] 벡터 유사도 검색 구현
- [ ] OpenAI Chat API 연동
- [ ] RAG 파이프라인 완성

### 3주차: AI 기반 코드 수정
- [ ] 코드 수정 요청 분석 (질문 vs 수정 요청 구분)
- [ ] LLM에게 수정된 코드 생성 요청
- [ ] 챗봇 페이지에 코드 미리보기 UI 추가
- [ ] 사용자 승인 후 Git 적용
- [ ] 에러 처리 및 피드백 시스템

## API 설계 (간단)

```python
# 페이지 라우트
GET  /                 # 메인 페이지 (URL + 토큰 입력 폼)
GET  /chat/{session_id} # 챗봇 페이지 (분석 완료 후 이동)

# API 엔드포인트  
POST /analyze          # 저장소 분석 시작 → 완료 시 챗봇 페이지로 이동
POST /chat            # 질문 처리 (일반 Q&A)
POST /modify_request  # 코드 수정 요청 (수정된 코드 미리보기)
POST /apply_changes   # 수정사항 승인 후 실제 적용
```

## 데이터 모델 (최소)

```python
# 메모리/로컬파일 기반 (DB 없음)
repository = {
    'url': str,
    'files': [{'path': str, 'content': str}],
    'has_token': bool
}

chat_history = [
    {'role': 'user|assistant', 'content': str}
]
```

## 핵심 학습 포인트

### RAG 시스템
- 텍스트 청킹 전략
- 임베딩 생성 및 저장
- 유사도 검색 구현
- 컨텍스트 윈도우 관리

### LLM 통합
- GPT-4o 프롬프트 엔지니어링
- API 호출 최적화 (토큰 효율성)
- 응답 파싱 및 처리
- 코드 생성 품질 관리

### GitHub 자동화
- API 인증 및 권한 관리
- Git 작업 자동화
- 브랜치 생성 및 푸시

## 예시 사용 흐름

### 메인 페이지에서:
```
1. 사용자: GitHub URL 입력 "https://github.com/user/repo"
2. 사용자: 토큰 입력 (선택사항)
3. "분석 시작" 클릭
4. 진행 상태: "파일 읽는 중... → 임베딩 생성 중... → 완료!"
5. 자동으로 챗봇 페이지로 이동
```

### 챗봇 페이지에서:
```
1. 시스템: "저장소 분석이 완료되었습니다. 질문해주세요!"
2. 사용자: "이 프로젝트는 뭘 하는 거야?"
3. 시스템: README와 주요 파일 분석해서 답변

4. 사용자: "main.py에 에러 처리를 추가해줘" (토큰 있을 때)
5. 시스템: 수정된 코드 미리보기 제공
6. 사용자: "좋아, 적용해줘"
7. 시스템: 새 브랜치 생성 → 커밋 → 푸시 → "PR 링크: ..."
```


## 제약사항 및 가정

### 제약사항
- 공개 저장소만 지원 (분석 모드)
- 주요 파일 형식만 처리 (`.py`, `.js`, `.md`)
- 1개 저장소씩 순차 처리
- 토큰은 메모리에만 저장 (재시작 시 재입력)


---

**핵심**: RAG + LLM + GitHub API의 핵심을 경험할 수 있는 실용적인 학습 프로젝트